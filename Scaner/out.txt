<Token List: >
1 IDENTIFIER #include
1 COMPARE_LESS <
1 IDENTIFIER stdio
1 DOT .
1 IDENTIFIER h
1 COMPARE_MORE >
2 IDENTIFIER #include
2 COMPARE_LESS <
2 IDENTIFIER locale
2 DOT .
2 IDENTIFIER h
2 COMPARE_MORE >
3 IDENTIFIER #include
3 COMPARE_LESS <
3 IDENTIFIER time
3 DOT .
3 IDENTIFIER h
3 COMPARE_MORE >
5 INT int
5 IDENTIFIER stem
5 SQUARE_BRACKET_L [
5 CONST_INTEGER 4
5 SQUARE_BRACKET_R ]
5 SQUARE_BRACKET_L [
5 CONST_INTEGER 64
5 SQUARE_BRACKET_R ]
5 SEMICOLON ;
6 INT int
6 IDENTIFIER numRings
6 SQUARE_BRACKET_L [
6 CONST_INTEGER 4
6 SQUARE_BRACKET_R ]
6 SEMICOLON ;
7 INT int
7 IDENTIFIER numMoves
7 SEMICOLON ;
11 VOID void
11 IDENTIFIER print_stem
11 PARENTHESIS_L (
11 PARENTHESIS_R )
13 BRACE_L {
14 INT int
14 IDENTIFIER i
14 COMMA ,
14 IDENTIFIER j
14 SEMICOLON ;
15 FOR for
15 PARENTHESIS_L (
15 IDENTIFIER i
15 COMPARE_EQUAL =
15 CONST_INTEGER 1
15 SEMICOLON ;
15 IDENTIFIER i
15 COMPARE_LESS <
15 COMPARE_EQUAL =
15 CONST_INTEGER 3
15 SEMICOLON ;
15 IDENTIFIER i
15 INC_OP ++
15 PARENTHESIS_R )
15 BRACE_L {
16 IDENTIFIER printf
16 PARENTHESIS_L (
16 SEPARATOR "
16 STRING \n
16 SEPARATOR "
16 PARENTHESIS_R )
16 SEMICOLON ;
17 IDENTIFIER printf
17 PARENTHESIS_L (
17 SEPARATOR "
17 STRING |
17 SEPARATOR "
17 PARENTHESIS_R )
17 SEMICOLON ;
19 FOR for
19 PARENTHESIS_L (
19 IDENTIFIER j
19 COMPARE_EQUAL =
19 CONST_INTEGER 0
19 SEMICOLON ;
19 IDENTIFIER j
19 COMPARE_LESS <
19 IDENTIFIER numRings
19 SQUARE_BRACKET_L [
19 IDENTIFIER i
19 SQUARE_BRACKET_R ]
19 SEMICOLON ;
19 IDENTIFIER j
19 INC_OP ++
19 PARENTHESIS_R )
20 IDENTIFIER printf
20 PARENTHESIS_L (
20 SEPARATOR "
20 STRING  %d
20 SEPARATOR "
20 COMMA ,
20 IDENTIFIER stem
20 SQUARE_BRACKET_L [
20 IDENTIFIER i
20 SQUARE_BRACKET_R ]
20 SQUARE_BRACKET_L [
20 IDENTIFIER j
20 SQUARE_BRACKET_R ]
20 PARENTHESIS_R )
20 SEMICOLON ;
22 BRACE_R }
23 IDENTIFIER printf
23 PARENTHESIS_L (
23 SEPARATOR "
23 STRING \n
23 SEPARATOR "
23 PARENTHESIS_R )
23 SEMICOLON ;
24 BRACE_R }
28 VOID void
28 IDENTIFIER init
28 PARENTHESIS_L (
28 INT int
28 IDENTIFIER numRingsings
28 PARENTHESIS_R )
29 BRACE_L {
30 FOR for
30 PARENTHESIS_L (
30 IDENTIFIER numRings
30 SQUARE_BRACKET_L [
30 CONST_INTEGER 1
30 SQUARE_BRACKET_R ]
30 COMPARE_EQUAL =
30 CONST_INTEGER 0
30 SEMICOLON ;
30 IDENTIFIER numRingsings
30 COMPARE_MORE >
30 CONST_INTEGER 0
30 SEMICOLON ;
30 IDENTIFIER numRings
30 SQUARE_BRACKET_L [
30 CONST_INTEGER 1
30 SQUARE_BRACKET_R ]
30 INC_OP ++
30 COMMA ,
30 IDENTIFIER numRingsings
30 DEC_OP --
30 PARENTHESIS_R )
31 IDENTIFIER stem
31 SQUARE_BRACKET_L [
31 CONST_INTEGER 1
31 SQUARE_BRACKET_R ]
31 SQUARE_BRACKET_L [
31 IDENTIFIER numRings
31 SQUARE_BRACKET_L [
31 CONST_INTEGER 1
31 SQUARE_BRACKET_R ]
31 SQUARE_BRACKET_R ]
31 COMPARE_EQUAL =
31 IDENTIFIER numRingsings
31 SEMICOLON ;
32 IDENTIFIER numRings
32 SQUARE_BRACKET_L [
32 CONST_INTEGER 2
32 SQUARE_BRACKET_R ]
32 COMPARE_EQUAL =
32 IDENTIFIER numRings
32 SQUARE_BRACKET_L [
32 CONST_INTEGER 3
32 SQUARE_BRACKET_R ]
32 COMPARE_EQUAL =
32 CONST_INTEGER 0
32 SEMICOLON ;
33 IDENTIFIER numMoves
33 COMPARE_EQUAL =
33 CONST_INTEGER 0
33 SEMICOLON ;
34 IDENTIFIER print_stem
34 PARENTHESIS_L (
34 PARENTHESIS_R )
34 SEMICOLON ;
35 BRACE_R }
39 VOID void
39 IDENTIFIER move
39 PARENTHESIS_L (
39 INT int
39 IDENTIFIER r1
39 COMMA ,
39 INT int
39 IDENTIFIER r2
39 PARENTHESIS_R )
40 BRACE_L {
41 IDENTIFIER stem
41 SQUARE_BRACKET_L [
41 IDENTIFIER r2
41 SQUARE_BRACKET_R ]
41 SQUARE_BRACKET_L [
41 IDENTIFIER numRings
41 SQUARE_BRACKET_L [
41 IDENTIFIER r2
41 SQUARE_BRACKET_R ]
41 INC_OP ++
41 SQUARE_BRACKET_R ]
41 COMPARE_EQUAL =
41 IDENTIFIER stem
41 SQUARE_BRACKET_L [
41 IDENTIFIER r1
41 SQUARE_BRACKET_R ]
41 SQUARE_BRACKET_L [
41 DEC_OP --
41 IDENTIFIER numRings
41 SQUARE_BRACKET_L [
41 IDENTIFIER r1
41 SQUARE_BRACKET_R ]
41 SQUARE_BRACKET_R ]
41 SEMICOLON ;
42 IDENTIFIER print_stem
42 PARENTHESIS_L (
42 PARENTHESIS_R )
42 SEMICOLON ;
43 IDENTIFIER numMoves
43 INC_OP ++
43 SEMICOLON ;
44 BRACE_R }
48 VOID void
48 IDENTIFIER hanoy
48 PARENTHESIS_L (
48 INT int
48 IDENTIFIER numRings
48 COMMA ,
48 INT int
48 IDENTIFIER st1
48 COMMA ,
48 INT int
48 IDENTIFIER st2
48 COMMA ,
48 INT int
48 IDENTIFIER st3
48 PARENTHESIS_R )
49 BRACE_L {
50 IF if
50 PARENTHESIS_L (
50 IDENTIFIER numRings
50 COMPARE_EQUAL =
50 COMPARE_EQUAL =
50 CONST_INTEGER 1
50 PARENTHESIS_R )
51 IDENTIFIER move
51 PARENTHESIS_L (
51 IDENTIFIER st1
51 COMMA ,
51 IDENTIFIER st3
51 PARENTHESIS_R )
51 SEMICOLON ;
52 ELSE else
52 BRACE_L {
53 IDENTIFIER hanoy
53 PARENTHESIS_L (
53 IDENTIFIER numRings
53 SUB_OP -
53 CONST_INTEGER 1
53 COMMA ,
53 IDENTIFIER st1
53 COMMA ,
53 IDENTIFIER st3
53 COMMA ,
53 IDENTIFIER st2
53 PARENTHESIS_R )
53 SEMICOLON ;
54 IDENTIFIER move
54 PARENTHESIS_L (
54 IDENTIFIER st1
54 COMMA ,
54 IDENTIFIER st3
54 PARENTHESIS_R )
54 SEMICOLON ;
55 IDENTIFIER hanoy
55 PARENTHESIS_L (
55 IDENTIFIER numRings
55 SUB_OP -
55 CONST_INTEGER 1
55 COMMA ,
55 IDENTIFIER st2
55 COMMA ,
55 IDENTIFIER st1
55 COMMA ,
55 IDENTIFIER st3
55 PARENTHESIS_R )
55 SEMICOLON ;
56 BRACE_R }
57 BRACE_R }
61 VOID void
61 IDENTIFIER main
61 PARENTHESIS_L (
61 PARENTHESIS_R )
62 BRACE_L {
64 IDENTIFIER clock_t
64 IDENTIFIER time
64 COMMA ,
64 IDENTIFIER end
64 SEMICOLON ;
65 IDENTIFIER time
65 COMPARE_EQUAL =
65 IDENTIFIER clock
65 PARENTHESIS_L (
65 PARENTHESIS_R )
65 SEMICOLON ;
67 IDENTIFIER setlocale
67 PARENTHESIS_L (
67 IDENTIFIER LC_ALL
67 COMMA ,
67 SEPARATOR "
67 STRING rus
67 SEPARATOR "
67 PARENTHESIS_R )
67 SEMICOLON ;
68 INT int
68 IDENTIFIER numRings
68 SEMICOLON ;
69 IDENTIFIER printf
69 PARENTHESIS_L (
69 SEPARATOR "
69 STRING Введите количество дисков: 
69 SEPARATOR "
69 PARENTHESIS_R )
69 SEMICOLON ;
70 IDENTIFIER scanf_s
70 PARENTHESIS_L (
70 SEPARATOR "
70 STRING %d
70 SEPARATOR "
70 COMMA ,
70 AND &
70 IDENTIFIER numRings
70 PARENTHESIS_R )
70 SEMICOLON ;
71 IDENTIFIER init
71 PARENTHESIS_L (
71 IDENTIFIER numRings
71 PARENTHESIS_R )
71 SEMICOLON ;
72 IDENTIFIER hanoy
72 PARENTHESIS_L (
72 IDENTIFIER numRings
72 COMMA ,
72 CONST_INTEGER 1
72 COMMA ,
72 CONST_INTEGER 2
72 COMMA ,
72 CONST_INTEGER 3
72 PARENTHESIS_R )
72 SEMICOLON ;
73 IDENTIFIER printf
73 PARENTHESIS_L (
73 SEPARATOR "
73 STRING Количество перемещений: %d\n
73 SEPARATOR "
73 COMMA ,
73 IDENTIFIER numMoves
73 PARENTHESIS_R )
73 SEMICOLON ;
75 IDENTIFIER time
75 COMPARE_EQUAL =
75 IDENTIFIER clock
75 PARENTHESIS_L (
75 PARENTHESIS_R )
75 SUB_OP -
75 IDENTIFIER time
75 SEMICOLON ;
76 IDENTIFIER printf
76 PARENTHESIS_L (
76 SEPARATOR "
76 STRING %f
76 SEPARATOR "
76 COMMA ,
76 PARENTHESIS_L (
76 DOUBLE double
76 PARENTHESIS_R )
76 IDENTIFIER time
76 DIV_OP /
76 IDENTIFIER CLOCKS_PER_SEC
76 PARENTHESIS_R )
76 SEMICOLON ;
78 IDENTIFIER system
78 PARENTHESIS_L (
78 SEPARATOR "
78 STRING pause
78 SEPARATOR "
78 PARENTHESIS_R )
78 SEMICOLON ;
80 BRACE_R }

<ID List: >
#include
CLOCKS_PER_SEC
LC_ALL
clock
clock_t
end
h
hanoy
i
init
j
locale
main
move
numMoves
numRings
numRingsings
print_stem
printf
r1
r2
scanf_s
setlocale
st1
st2
st3
stdio
stem
system
time
